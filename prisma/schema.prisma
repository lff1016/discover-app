generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique // 用户登录返回的用户id
  name     String
  imageUrl String
  email    String @unique

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id])

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInvitiated Conversation[] @relation("MemeberOne")
  conversationsRecived    Conversation[] @relation("MemeberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  VOICE
  AUDIO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  fileUrl String

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])

  deleted Boolean @default(false) // 消息是否被删除

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 对话
model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String @db.ObjectId
  memberOne   Member @relation("MemeberOne", fields: [memberOneId], references: [id])

  memberTwoId String @db.ObjectId
  memberTwo   Member @relation("MemeberTwo", fields: [memberTwoId], references: [id])

  directMessages DirectMessage[]
}

// 发送消息
model DirectMessage {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  conversationId String?       @db.ObjectId
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
